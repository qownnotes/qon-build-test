name: 'build'

on:
  push:
    branches:
      - develop
    tags-ignore:
      - '*'
  pull_request:

defaults:
  run:
    working-directory: src

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Linux:   https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/
        # macOS:   https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
        # Windows: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/
        qt-version: ['5.3', '5.4', '5.7', '5.13.2', '5.14.2', '5.15.0']
        exclude:
          # xcode not found
          - os: macos-latest
            qt-version: '5.3'
          # xcode not found
          - os: macos-latest
            qt-version: '5.4'
          # win64_mingw73 not found
          - os: windows-latest
            qt-version: '5.3'
          # win64_mingw73 not found
          - os: windows-latest
            qt-version: '5.4'
          # Qt installation times out too often
          - os: windows-latest
            qt-version: '5.13.2'
          # win64_mingw73 not found
          - os: windows-latest
            qt-version: '5.15.0'
          # Download error: decompression get wrong: no output data.
          - os: windows-latest
            qt-version: '5.7'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Get version
      uses: allenevans/set-env@v1.0.0
      with:
        VERSION: $(cat version.h | sed "s/[^0-9,.]//g")
    - name: Printenv
      run: |
        echo "VERSION=${VERSION}"
        printenv
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths my-artifact main.cpp
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip
