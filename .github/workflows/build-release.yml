name: 'build-release'

on:
  push:
    branches:
      - develop
    tags-ignore:
      - '*'
  pull_request:

defaults:
  run:
    working-directory: src

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Env
        run: |
          export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
          export TAG=v${VERSION}.${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}
          export RELEASE_TEXT=$(grep -Pzo '## 20.7.4\n(\n|.)+?\n##' ../CHANGELOG.md | sed '$ d')
          RELEASE_TEXT="${RELEASE_TEXT//'%'/'%25'}"
          RELEASE_TEXT="${RELEASE_TEXT//$'\n'/'%0A'}"
          RELEASE_TEXT="${RELEASE_TEXT//$'\r'/'%0D'}"
          echo "::set-env name=VERSION::${VERSION}"
          echo "::set-env name=TAG::${TAG}"
          echo "::set-env name=RELEASE_TEXT::${RELEASE_TEXT}"
      - name: Printenv
        run: |
          echo "VERSION=${VERSION}"
          echo "TAG=${TAG}"
          echo "RELEASE_TEXT=${RELEASE_TEXT}"
          printenv
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_TEXT }}

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Linux:   https://download.qt.io/online/qtsdkrepository/linux_x64/desktop/
        # macOS:   https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/
        # Windows: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/
        qt-version: ['5.14.2']
    steps:
    - uses: actions/checkout@v2	
      with:	
        submodules: true
    - name: Set Env
      shell: bash
      run: |
        export VERSION=$(cat version.h | sed 's/[^0-9,.]//g')
        export TAG=v${VERSION}.${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}
        echo "::set-env name=VERSION::${VERSION}"
        echo "::set-env name=TAG::${TAG}"

    #
    # Install Qt
    #

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}
    # https://github.com/marketplace/actions/install-qt
    - if: contains( matrix.os, 'windows')
      name: Install Qt on Windows
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        arch: win64_mingw73
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - if: false == contains( matrix.os, 'windows')
      name: Install Qt on Linux and macOS
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.qt-version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Printenv
      shell: bash
      run: |
        echo "VERSION=${VERSION}"
        echo "TAG=${TAG}"
        printenv

    #
    # Build QOwnNotes
    #

#    - name: Build
#      run: |
#        echo "#define RELEASE \"GitHub Action\"" > release.h
#        qmake
#        lrelease QOwnNotes.pro
#        make
    - if: contains( matrix.os, 'ubuntu')
      name: Build for Linux
      run: |
        echo "#define RELEASE \"GitHub Actions\"" > release.h
        qmake
        lrelease QOwnNotes.pro
        make -j 2
        tar czf QOwnNotes.tar.gz *

    - if: contains( matrix.os, 'macos')
      name: Build for macOS
      run: |
        echo "#define RELEASE \"GitHub Actions\"" > release.h
        lrelease QOwnNotes.pro
        ls ${Qt5_Dir}/bin
        whereis qmake
        qmake
        make -j 2
        ../travis/create-dmg.sh

    - if: contains( matrix.os, 'windows')
      name: Build for Windows
      run: |
        echo "#define RELEASE ""GitHub Actions""" > release.h
        type release.h
        qmake
        lrelease QOwnNotes.pro
        make
        md ..\release
        dir release
        # copy the binary to our release path
        copy release\QOwnNotes.exe ..\release
        # copy OpenSSL DLLs to the release path
        copy ..\appveyor\OpenSSL\libcrypto-1_1.dll ..\release
        copy ..\appveyor\OpenSSL\libssl-1_1.dll ..\release
        # copy unzip application for updater
        copy ..\appveyor\unzip.exe ..\release
        # copy updater script
        copy ..\appveyor\update.bat ..\release
        # copy portable mode launcher to the release path
        copy ..\appveyor\QOwnNotesPortable.bat ..\release
        # copy translation files
        copy languages\*.qm ..\release
        cd ..\release
        # fetching dependencies of QT app
        # http://doc.qt.io/qt-5/windows-deployment.html
        windeployqt --release QOwnNotes.exe
        # this dll was missed by windeployqt
        copy ..\libwinpthread-1.dll .
        # this dll didn't work when released by windeployqt
        # important: this dll needs to be updated when a new version of Qt is used!
        # search for it in the mingw* folder of your local installation of Qt
        copy "..\libstdc++-6.dll" .
        # for some reason AppVeyor or windeployqt uses a copy of the German
        # translation file as English one, which screws up the English user interface
        del "translations\qt_en.qm"
        tar.exe -a -c -f QOwnNotes.zip *

    #
    # Release QOwnNotes
    #

    - if: contains( matrix.os, 'ubuntu')
      name: Upload Release Asset for Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes.tar.gz
        asset_name: QOwnNotes-linux-${{ env.VERSION }}.tar.gz
        asset_content_type: application/gzip

    - if: contains( matrix.os, 'macos')
      name: Upload Release Asset for macOS
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes-.dmg
        asset_name: QOwnNotes-macos-${{ env.VERSION }}.dmg
        asset_content_type: application/x-apple-diskimage

    - if: contains( matrix.os, 'windows')
      name: Upload Release Asset for Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./src/QOwnNotes.zip
        asset_name: QOwnNotes-windows.zip
        asset_content_type: application/zip
